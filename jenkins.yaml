jenkins:
  systemMessage: "Master-Jenkins for CDEV team (poc testing): configured automatically with JCasC plugin\n\n"
tool:
  git:
    installations:
    - home: "git"
      name: "Default"
  maven:
    installations:
    - name: "Maven 3"
      properties:
      - installSource:
          installers:
            - maven:
                id: "3.5.4"
jobs:
  - script: >
      multibranchPipelineJob('configuration-as-code') {
          branchSources {
              git {
                  id = 'configuration-as-code'
                  remote('https://github.com/jenkinsci/configuration-as-code-plugin.git')
              }
          }
      }
  - script: >
      multibranchPipelineJob('configuration-as-code-sample2') {
          branchSources {
              git {
                  id = 'configuration-as-code'
                  remote('https://github.com/jenkinsci/configuration-as-code-plugin.git')
              }
          }
      }
  - script: >
      job("Seed_Job_test_POC") {

  // Parameters for users of the Jenkins job to pass in
  parameters {
    // String parameters are simply single line text inputs.  The arguments of stringParam() are as follows:
    // (1) -> the name of the parameter that can be used later in the script as a variable.
    // (2) -> the default value of the parameter.  Defaults to null.
    // (3) -> the description of the parameter which will be displayed in Jenkins.
    stringParam("job_dsl_repo", "", "Job DSL Repo")
    stringParam("job_dsl_branch", "", "Job DSL Branch")
    stringParam("job_dsl_path", "", "Location of Job DSL Groovy Script")
  }

  // SCM (Source Control Management) allows the Jenkins pipeline to use different version control systems
  scm {
    // In my case, I use Git
    git {
      // From the repository specified in one of the Jenkins job parameters, checkout from a certain branch
      branch("\$job_dsl_branch")
      remote {
        name("origin")
        url("\$job_dsl_repo")
      }
    }
  }

  // Add build steps to the freestyle job.
  steps {

    // Add a Job DSL Plugin step to the freestyle job.  This step runs a Groovy script to build Jenkins jobs.
    dsl {
      // Read the Groovy script to build Jenkins job from the Jenkins workspace
      external("\$job_dsl_path")
    }
  }
}
